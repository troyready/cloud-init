From 7dd285af24a2abd0ff637b2597af59e2b903d243 Mon Sep 17 00:00:00 2001
From: Andrew Jorgensen <ajorgens@amazon.com>
Date: Tue, 10 Sep 2013 15:32:15 -0700
Subject: [PATCH] Expand the migrator module to handle more legacy

Reviewed-by: Matt Nierzwicki <nierzwic@amazon.com>
Reviewed-by: Tom Kirchner <tjk@amazon.com>
[ajorgens@amazon.com: Use set-defaults to block remaining modules on upgrade]
[ajorgens@amazon.com: Migrate user-scripts]
Reviewed-by: Ethan Faust <efaust@amazon.com>
Reviewed-by: Ben Cressey <bcressey@amazon.com>
[ajorgens@amazon.com: Remove _migrate_user_scripts (not needed)]
Reviewed-by: Ben Cressey <bcressey@amazon.com>
Reviewed-by: Ian Weller <iweller@amazon.com>
---
 cloudinit/config/cc_migrator.py | 177 ++++++++++++++++++++++++++++++----------
 1 file changed, 132 insertions(+), 45 deletions(-)

diff --git a/cloudinit/config/cc_migrator.py b/cloudinit/config/cc_migrator.py
index 05c4ba1..cb89e2c 100644
--- a/cloudinit/config/cc_migrator.py
+++ b/cloudinit/config/cc_migrator.py
@@ -19,67 +19,155 @@
 #    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 import os
+import fnmatch
 import shutil
 
 from cloudinit import helpers
 from cloudinit import util
 
-from cloudinit.settings import PER_ALWAYS
+from cloudinit.settings import PER_ALWAYS, PER_INSTANCE, PER_ONCE, FREQUENCIES
+from cloudinit.config.cc_scripts_user import SCRIPT_SUBDIR
+
 
 frequency = PER_ALWAYS
+LEGACY_SEM_MAP = {
+    'apt-update-upgrade': [
+        'config-apt-configure',
+        'config-package-update-upgrade-install',
+    ],
+    'config-genrepo': [
+        'config-yum-configure',
+    ],
+    'config-package-setup': [
+        'config-yum-configure',
+        'config-yum-add-repo',
+        'config-package-update-upgrade-install',
+    ],
+    'consume-userdata': [
+        'consume-data',
+    ],
+    'set-hostname': [
+        'config-set-hostname',
+    ],
+    'update-hostname': [
+        'config-update-hostname',
+    ],
+    'user-scripts': [
+        'config-scripts-user',
+    ],
+    # We don't want customers who upgraded from 0.5 to have any new modules run
+    # after the next reboot, so we will take this semaphore that only existed
+    # on 0.5 and create all the new semaphores.
+    'set-defaults': [
+        'config-power-state-change',
+        'config-phone-home',
+        'config-keys-to-console',
+        'config-ssh-authkey-fingerprints',
+        'config-scripts-per-instance',
+        ('config-scripts-per-once', PER_ONCE),
+        # Don't migrate this one, because if user-scripts hasn't run, we want
+        # to have a chance to run them if cloud-init has upgraded itself.
+        # If it has run, it will get migrated by the user-scripts entry.
+        #'config-scripts-user',
+        'config-timezone',
+        'config-set-passwords',
+        'config-set-hostname',
+        'config-users-groups',
+        'config-write-files',
+        'config-rsyslog',
+    ],
+}
+
 
+def _migrate_legacy_per_instance(cloud, log):
+    """Migrates legacy per_instance semaphores to their new location."""
+    instance_id = cloud.get_instance_id()
+    # Old per-instance semaphores were stored in the cpath:
+    # /var/lib/cloud/sem
+    cpath = cloud.paths.get_cpath('sem')
+    if not cpath or not os.path.isdir(cpath):
+        return
+    sem_helper = helpers.FileSemaphores(cloud.paths.get_ipath('sem'))
+    log.debug('Searching for legacy per-instance semaphores under %s', cpath)
+    # We're only interested in the current instance-id, since any
+    # previous should never show up again.
+    for p in fnmatch.filter(os.listdir(cpath), '*.' + instance_id):
+        # isfile to avoid any directories
+        if not os.path.isfile(os.path.join(cpath, p)):
+            continue
+        log.debug('Looking at %s', p)
+        (name, _freq) = os.path.splitext(p)
+        if sem_helper.has_run(name, PER_INSTANCE):
+            continue
+        with sem_helper.lock(name, PER_INSTANCE):
+            log.warning("Migrated semaphore %s with frequency %s",
+                        name, PER_INSTANCE)
 
-def _migrate_canon_sems(cloud):
+
+def _migrate_canon_sems(cloud, log):
+    """Migrates non-canonical semaphores to their canonical names."""
     paths = (cloud.paths.get_ipath('sem'), cloud.paths.get_cpath('sem'))
-    am_adjusted = 0
+    log.debug('Migrating semaphores which are not named canonically.')
     for sem_path in paths:
-        if not sem_path or not os.path.exists(sem_path):
+        if not sem_path or not os.path.isdir(sem_path):
             continue
         for p in os.listdir(sem_path):
-            full_path = os.path.join(sem_path, p)
-            if os.path.isfile(full_path):
-                (name, ext) = os.path.splitext(p)
-                canon_name = helpers.canon_sem_name(name)
-                if canon_name != name:
-                    new_path = os.path.join(sem_path, canon_name + ext)
-                    shutil.move(full_path, new_path)
-                    am_adjusted += 1
-    return am_adjusted
+            if not os.path.isfile(os.path.join(sem_path, p)):
+                continue
+            log.debug('Looking at %s', p)
+            (name, ext) = os.path.splitext(p)
+            canon_name = helpers.canon_sem_name(name)
+            source = os.path.join(sem_path, p)
+            destination = os.path.join(sem_path, canon_name + ext)
+            if canon_name == name or os.path.exists(destination):
+                continue
+            shutil.copy(source, destination)
+            log.warning("Migrated semaphore %s to %s", name, canon_name)
 
 
 def _migrate_legacy_sems(cloud, log):
-    legacy_adjust = {
-        'apt-update-upgrade': [
-            'apt-configure',
-            'package-update-upgrade-install',
-        ],
-        'genrepo': [
-            'yum-configure',
-        ],
-        'package-setup': [
-            'package-update-upgrade-install',
-        ],
-    }
-    paths = (cloud.paths.get_ipath('sem'), cloud.paths.get_cpath('sem'))
-    for sem_path in paths:
-        if not sem_path or not os.path.exists(sem_path):
+    """Migrates semaphores which have been renamed or split."""
+    ipath = cloud.paths.get_ipath('sem')
+    isem_helper = helpers.FileSemaphores(ipath)
+    cpath = cloud.paths.get_cpath('sem')
+    csem_helper = helpers.FileSemaphores(cpath)
+
+    log.debug("Migrating semaphores which have been renamed or split.")
+    for sem_path in (ipath, cpath):
+        if not sem_path or not os.path.isdir(sem_path):
             continue
-        sem_helper = helpers.FileSemaphores(sem_path)
-        for (mod_name, migrate_to) in legacy_adjust.items():
-            possibles = [mod_name, helpers.canon_sem_name(mod_name)]
-            old_exists = []
-            for p in os.listdir(sem_path):
-                (name, _ext) = os.path.splitext(p)
-                if name in possibles and os.path.isfile(p):
-                    old_exists.append(p)
-            for p in old_exists:
-                util.del_file(os.path.join(sem_path, p))
+        log.debug("Looking in %s", sem_path)
+        listed = os.listdir(sem_path)
+        for (mod_name, migrate_to) in LEGACY_SEM_MAP.items():
+            mod_name = helpers.canon_sem_name(mod_name)
+            for p in fnmatch.filter(listed, mod_name + '*'):
+                if not os.path.isfile(os.path.join(sem_path, p)):
+                    continue
                 (_name, freq) = os.path.splitext(p)
+                if freq:
+                    # Trim the .
+                    freq = freq[1:]
+                    if freq not in FREQUENCIES:
+                        continue
+                elif sem_path == ipath:
+                    freq = PER_INSTANCE
+                else:
+                    continue
                 for m in migrate_to:
-                    log.debug("Migrating %s => %s with the same frequency",
-                              p, m)
-                    with sem_helper.lock(m, freq):
-                        pass
+                    to_freq = freq
+                    if not isinstance(m, basestring):
+                        # If it's not a string, it should have a frequency
+                        (m, to_freq) = m
+                    if to_freq == PER_INSTANCE:
+                        sem_helper = isem_helper
+                    else:
+                        sem_helper = csem_helper
+                    if sem_helper.has_run(m, to_freq):
+                        continue
+                    with sem_helper.lock(m, to_freq):
+                        log.warning(
+                            "Migrated semaphore %s to %s with frequency %s",
+                            p, m, to_freq)
 
 
 def handle(name, cfg, cloud, log, _args):
@@ -87,7 +175,6 @@ def handle(name, cfg, cloud, log, _args):
     if not util.translate_bool(do_migrate):
         log.debug("Skipping module named %s, migration disabled", name)
         return
-    sems_moved = _migrate_canon_sems(cloud)
-    log.debug("Migrated %s semaphore files to there canonicalized names",
-              sems_moved)
+    _migrate_canon_sems(cloud, log)
+    _migrate_legacy_per_instance(cloud, log)
     _migrate_legacy_sems(cloud, log)
-- 
2.7.4

