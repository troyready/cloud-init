From 531aa0c56ad8b056f3adf52c262f6bae110c85e8 Mon Sep 17 00:00:00 2001
From: Andrew Jorgensen <ajorgens@amazon.com>
Date: Thu, 29 Aug 2013 17:29:08 -0700
Subject: [PATCH] repo_upgrade handling (security levels)

---
 .../config/cc_package_update_upgrade_install.py    | 16 ++++-
 cloudinit/distros/__init__.py                      |  6 ++
 cloudinit/distros/amazon.py                        | 69 +++++++++++++++++++++-
 3 files changed, 88 insertions(+), 3 deletions(-)

diff --git a/cloudinit/config/cc_package_update_upgrade_install.py b/cloudinit/config/cc_package_update_upgrade_install.py
index 73b0e30..ded7b4d 100644
--- a/cloudinit/config/cc_package_update_upgrade_install.py
+++ b/cloudinit/config/cc_package_update_upgrade_install.py
@@ -1,8 +1,10 @@
 # vi: ts=4 expandtab
 #
 #    Copyright (C) 2012 Yahoo! Inc.
+#    Copyright (C) 2014 Amazon.com, Inc. or its affiliates.
 #
 #    Author: Joshua Harlow <harlowja@yahoo-inc.com>
+#    Author: Andrew Jorgensen <ajorgens@amazon.com>
 #
 #    This program is free software: you can redistribute it and/or modify
 #    it under the terms of the GNU General Public License version 3, as
@@ -50,12 +52,22 @@ def _fire_reboot(log, wait_attempts=6, initial_sleep=1, backoff=2):
 
 def handle(_name, cfg, cloud, log, _args):
     # Handle the old style + new config names
-    update = _multi_cfg_bool_get(cfg, 'apt_update', 'package_update')
+    update = _multi_cfg_bool_get(cfg, 'apt_update', 'package_update',
+                                 'repo_update')
     upgrade = _multi_cfg_bool_get(cfg, 'package_upgrade', 'apt_upgrade')
     reboot_if_required = _multi_cfg_bool_get(cfg, 'apt_reboot_if_required',
                                              'package_reboot_if_required')
     pkglist = util.get_cfg_option_list(cfg, 'packages', [])
 
+    # Amazon option that should also trigger an upgrade, but isn't bool
+    upgrade_level = util.get_cfg_option_str(cfg, 'repo_upgrade', upgrade)
+    if upgrade_level not in ('none', 'false', 'False'):
+        upgrade = True
+    else:
+        # condense none, false, and False to none
+        upgrade_level = 'none'
+    upgrade_exclude = util.get_cfg_option_list(cfg, 'repo_upgrade_exclude', [])
+
     errors = []
     if update or len(pkglist) or upgrade:
         try:
@@ -66,7 +78,7 @@ def handle(_name, cfg, cloud, log, _args):
 
     if upgrade:
         try:
-            cloud.distro.package_command("upgrade")
+            cloud.distro.upgrade_packages(upgrade_level, upgrade_exclude)
         except Exception as e:
             util.logexc(log, "Package upgrade failed")
             errors.append(e)
diff --git a/cloudinit/distros/__init__.py b/cloudinit/distros/__init__.py
index 5342a4f..65ee110 100644
--- a/cloudinit/distros/__init__.py
+++ b/cloudinit/distros/__init__.py
@@ -3,11 +3,13 @@
 #    Copyright (C) 2012 Canonical Ltd.
 #    Copyright (C) 2012, 2013 Hewlett-Packard Development Company, L.P.
 #    Copyright (C) 2012 Yahoo! Inc.
+#    Copyright (C) 2014 Amazon.com, Inc. or its affiliates.
 #
 #    Author: Scott Moser <scott.moser@canonical.com>
 #    Author: Juerg Haefliger <juerg.haefliger@hp.com>
 #    Author: Joshua Harlow <harlowja@yahoo-inc.com>
 #    Author: Ben Howard <ben.howard@canonical.com>
+#    Author: Andrew Jorgensen <ajorgens@amazon.com>
 #
 #    This program is free software: you can redistribute it and/or modify
 #    it under the terms of the GNU General Public License version 3, as
@@ -67,6 +69,10 @@ class Distro(object):
         raise NotImplementedError()
 
     @abc.abstractmethod
+    def upgrade_packages(self, level=None, exclude=[]):
+        raise NotImplementedError()
+
+    @abc.abstractmethod
     def _write_network(self, settings):
         # In the future use the http://fedorahosted.org/netcf/
         # to write this blob out in a distro format
diff --git a/cloudinit/distros/amazon.py b/cloudinit/distros/amazon.py
index 489e9e7..020abed 100644
--- a/cloudinit/distros/amazon.py
+++ b/cloudinit/distros/amazon.py
@@ -25,9 +25,76 @@
 from cloudinit.distros import rhel
 
 from cloudinit import log as logging
+from cloudinit import util
 
 LOG = logging.getLogger(__name__)
 
+# for upgrade levels
+UPGRADE_ALL       = -1
+UPGRADE_NONE      = 0
+UPGRADE_CRITICAL  = 1
+UPGRADE_IMPORTANT = 2
+UPGRADE_MEDIUM    = 3
+UPGRADE_LOW       = 4
+UPGRADE_BUGFIX    = 5
+# the default level for "security"
+UPGRADE_SECURITY  = UPGRADE_IMPORTANT
 
 class Distro(rhel.Distro):
-    pass
+
+    def upgrade_packages(self, level='none', exclude=[]):
+        LOG.debug('Upgrade level: %s', level)
+        level = self._resolve_upgrade_level(level)
+        args = self._upgrade_level_args(level, exclude)
+        return self.package_command('upgrade', args=args)
+
+    def _resolve_upgrade_level(self, level):
+        """Map the possible upgrade level choices to well known ones."""
+        # the config parser will "helpfully" recognizes the boolean values
+        # (on/off true/false 0/1 yes/no) and returns a bool even though we
+        # asked for the *string* the user passed in. So now we need to figure
+        # if that is the case and handle it.
+        if isinstance(level, bool):
+            if level: level = 'all'
+            else: level = 'none'
+
+        levels_map = dict(
+            critical = UPGRADE_CRITICAL,
+            important = UPGRADE_IMPORTANT,
+            medium = UPGRADE_MEDIUM,
+            low = UPGRADE_LOW,
+            bugfix = UPGRADE_BUGFIX,
+            security = UPGRADE_SECURITY,
+            all = UPGRADE_ALL,
+            none = UPGRADE_NONE,
+            # these are aliases that we have supported in the past - keep them
+            # around for backwards compatibility
+            fixes = UPGRADE_BUGFIX,
+            bugs = UPGRADE_BUGFIX,
+            bugfixes = UPGRADE_BUGFIX,
+            true = UPGRADE_ALL,
+            on = UPGRADE_ALL,
+            yes = UPGRADE_ALL,
+            )
+        return levels_map.get(level.lower(), UPGRADE_NONE)
+
+    def _upgrade_level_args(self, level, exclude=[]):
+        """Translate from an upgrade level and list of excludes to yum args."""
+        args = ['--exclude=' + exclude_spec for exclude_spec in exclude]
+        # 'all' doesn't need extra args because by default all updates are
+        # included when running yum
+        if level == UPGRADE_CRITICAL:
+            args.extend(['--security', '--sec-severity=critical'])
+        elif level == UPGRADE_IMPORTANT:
+            args.extend(['--security', '--sec-severity=critical',
+                         '--sec-severity=important'])
+        elif level == UPGRADE_MEDIUM:
+            args.extend(['--security', '--sec-severity=critical',
+                         '--sec-severity=important', '--sec-severity=medium'])
+        elif level == UPGRADE_LOW:
+            args.append('--security') # this catches all security updates
+        elif level == UPGRADE_BUGFIX:
+            # we treat bugfixes like "all" since all updates are in some sense
+            # bugfix updates.
+            pass
+        return args
-- 
2.1.0

