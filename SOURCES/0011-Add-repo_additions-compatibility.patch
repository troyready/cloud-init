From ec41d9c7a5a69a9dbea048674136172df4aa2f04 Mon Sep 17 00:00:00 2001
From: Andrew Jorgensen <ajorgens@amazon.com>
Date: Mon, 9 Sep 2013 14:42:28 -0700
Subject: [PATCH] Add repo_additions compatibility

Reviewed-by: Matt Nierzwicki <nierzwic@amazon.com>
---
 cloudinit/config/cc_yum_add_repo.py | 80 ++++++++++++++++++++++++++++---------
 1 file changed, 62 insertions(+), 18 deletions(-)

diff --git a/cloudinit/config/cc_yum_add_repo.py b/cloudinit/config/cc_yum_add_repo.py
index 0d836f2..751575f 100644
--- a/cloudinit/config/cc_yum_add_repo.py
+++ b/cloudinit/config/cc_yum_add_repo.py
@@ -1,8 +1,10 @@
 # vi: ts=4 expandtab
 #
 #    Copyright (C) 2012 Yahoo! Inc.
+#    Copyright (C) 2014 Amazon.com, Inc. or its affiliates.
 #
 #    Author: Joshua Harlow <harlowja@yahoo-inc.com>
+#    Author: Andrew Jorgensen <ajorgens@amazon.com>
 #
 #    This program is free software: you can redistribute it and/or modify
 #    it under the terms of the GNU General Public License version 3, as
@@ -17,16 +19,21 @@
 #    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 import os
+import re
+import string
 
 from cloudinit import util
 
 import configobj
 
+# Valid characters taken from yum/__init__.py
+_REPO_ID_VALID = re.compile(
+    '[^%s%s%s]' % ('-_.:', string.ascii_letters, string.digits))
+
 
 def _canonicalize_id(repo_id):
-    repo_id = repo_id.lower().replace("-", "_")
-    repo_id = repo_id.replace(" ", "_")
-    return repo_id
+    """Replace invalid characters, so that the ID will be valid."""
+    return _REPO_ID_VALID.sub('_', repo_id)
 
 
 def _format_repo_value(val):
@@ -45,6 +52,8 @@ def _format_repo_value(val):
 # TODO(harlowja): move to distro?
 # See man yum.conf
 def _format_repository_config(repo_id, repo_config):
+    #TODO: Use iniparse instead, since that's what yum uses
+    #TODO: Sort the keys so that they are more like what you'd normally see
     to_be = configobj.ConfigObj()
     to_be[repo_id] = {}
     # Do basic translation of the items -> values
@@ -54,11 +63,50 @@ def _format_repository_config(repo_id, repo_config):
         to_be[repo_id][k] = _format_repo_value(v)
     lines = to_be.write()
     lines.insert(0, "# Created by cloud-init on %s" % (util.time_rfc2822()))
+    # Ensure there's a newline before EOF
+    lines.append('')
     return "\n".join(lines)
 
 
+def _translate_repo_additions(repos):
+    """Translate repo_additions configs to yum_repos configs.
+
+    repo_additions:
+     - source: "my_repo"
+       filename: my.repo
+       enabled: 1
+       gpgcheck: 0
+       baseurl: http://foo.bar.baz/mypath/
+     - source: "your_repo"
+       filename: your.repo
+       enabled: 0
+       key: http://your.site/static/gpg-key.pub
+       mirrorlist: http://foo.bar.baz/yourpath/mirrors.list
+    """
+    # repo_additions defaulted to a 5m mirror_expire
+    MIRROR_EXPIRE = '5m'
+    translated = {}
+    for repo in repos:
+        # All of these defaults are derived from the dist_repo_yum module from
+        # the Amazon Linux AMI fork of cloud-init-0.5.
+        if repo.has_key('key'):
+            repo.setdefault('gpgkey', repo.pop('key'))
+            repo.setdefault('gpgcheck', True)
+        if repo.has_key('mirrorlist'):
+            repo.setdefault('mirror_expire', MIRROR_EXPIRE)
+        if repo.has_key('source'):
+            repo.setdefault('name', repo['source'])
+        repo.setdefault('enabled', False)
+        repo.setdefault('filename', 'cloud_config.repo')
+        translated[_canonicalize_id(repo.pop('source', 'cloud_config'))] = repo
+    return translated
+
+
 def handle(name, cfg, _cloud, log, _args):
-    repos = cfg.get('yum_repos')
+    # Get and translate repo_additions first, as we'd like yum_repos values to
+    # override them
+    repos = _translate_repo_additions(cfg.get('repo_additions', []))
+    repos.update(cfg.get('yum_repos', {}))
     if not repos:
         log.debug(("Skipping module named %s,"
                    " no 'yum_repos' configuration found"), name)
@@ -69,7 +117,9 @@ def handle(name, cfg, _cloud, log, _args):
     repo_configs = {}
     for (repo_id, repo_config) in repos.items():
         canon_repo_id = _canonicalize_id(repo_id)
-        repo_fn_pth = os.path.join(repo_base_path, "%s.repo" % (canon_repo_id))
+        repo_fn_path = repo_config.pop('filename', "%s.repo" % (canon_repo_id))
+        if not os.path.isabs(repo_fn_path):
+            repo_fn_pth = os.path.join(repo_base_path, repo_fn_path)
         if os.path.exists(repo_fn_pth):
             log.info("Skipping repo %s, file %s already exists!",
                      repo_id, repo_fn_pth)
@@ -87,19 +137,13 @@ def handle(name, cfg, _cloud, log, _args):
             if k:
                 n_repo_config[k] = v
         repo_config = n_repo_config
-        missing_required = 0
-        for req_field in ['baseurl']:
-            if req_field not in repo_config:
-                log.warn(("Repository %s does not contain a %s"
-                           " configuration 'required' entry"),
-                         repo_id, req_field)
-                missing_required += 1
-        if not missing_required:
-            repo_configs[canon_repo_id] = repo_config
-            repo_locations[canon_repo_id] = repo_fn_pth
-        else:
-            log.warn("Repository %s is missing %s required fields, skipping!",
-                     repo_id, missing_required)
+        if not (repo_config.has_key('baseurl') or
+                repo_config.has_key('mirrorlist')):
+            log.warning(("Repository %s does not contain a baseurl or "
+                "mirrorlist entry. Skipping."), repo_id)
+            continue
+        repo_configs[canon_repo_id] = repo_config
+        repo_locations[canon_repo_id] = repo_fn_pth
     for (c_repo_id, path) in repo_locations.items():
         repo_blob = _format_repository_config(c_repo_id,
                                               repo_configs.get(c_repo_id))
-- 
2.1.0

